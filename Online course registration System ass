abstract class User {
    protected String name;
    protected String email;

    public User(String name, String email) {
        this.name = name;
        this.email = email;
    }

    public abstract void displayRole();
}

class Admin extends User {
    public Admin(String name, String email) {
        super(name, email);
    }

    public void displayRole() {
        System.out.println("Role: Admin");
    }

    public void manageCourses() {
        System.out.println(name + " can add or remove courses.");
    }
}

class Student extends User {
    private static int studentCount = 0;
    private int studentId;

    public Student(String name, String email) {
        super(name, email);
        studentId = ++studentCount;
    }

    public void displayRole() {
        System.out.println("Role: Student");
    }

    public void registerCourse(Course course) {
        System.out.println(name + " registered for: " + course.getCourseName());
    }

    protected void finalize() {
        System.out.println("Student object for " + name + " is destroyed.");
    }
}

class Course {
    private static int courseCount = 0;
    private final int courseId;
    private String courseName;

    public Course(String courseName) {
        this.courseName = courseName;
        this.courseId = ++courseCount;
    }

    public String getCourseName() {
        return courseName;
    }

    public void showCourse() {
        System.out.println("Course ID: " + courseId + " | Name: " + courseName);
    }
}

class ProgrammingCourse extends Course {
    private String language;

    public ProgrammingCourse(String courseName, String language) {
        super(courseName);
        this.language = language;
    }

    public void showCourse() {
        super.showCourse();
        System.out.println("Language: " + language);
    }
}

public class OnlineCourseSystem {
    public static void main(String[] args) {
        Admin admin = new Admin("Dr. Smith", "smith@online.com");
        Student student1 = new Student("Alice", "alice@gmail.com");
        Student student2 = new Student("Bob", "bob@gmail.com");

        admin.displayRole();
        admin.manageCourses();

        student1.displayRole();
        student2.displayRole();

        Course course1 = new Course("Data Structures");
        ProgrammingCourse course2 = new ProgrammingCourse("Java Programming", "Java");

        course1.showCourse();
        course2.showCourse();

        student1.registerCourse(course1);
        student2.registerCourse(course2);

        // Request GC to trigger finalize (not guaranteed)
        student1 = null;
        student2 = null;
        System.gc();
    }
}
